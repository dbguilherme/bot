import{RuntimeModel as e,SDKModel as t,ResourceTreeModel as n,ConsoleModel as i,NetworkManager as o,DOMDebuggerModel as r,DebuggerModel as s}from"../sdk/sdk.js";import{NetworkProject as a,ResourceMapping as c,PresentationConsoleMessageHelper as l,CSSWorkspaceBinding as d,DebuggerWorkspaceBinding as g,BreakpointManager as u,BlackboxManager as p}from"../bindings/bindings.js";import{Settings as m,UIString as h,AppProvider as f,QueryParamHandler as S,Console as x,Revealer as v}from"../common/common.js";import{Reload as w}from"../components/components.js";import{ExtensionServer as M}from"../extensions/extensions.js";import{InspectorFrontendHost as b,Platform as C,userMetrics as I,InspectorFrontendHostAPI as _,UserMetrics as k}from"../host/host.js";import{IsolatedFileSystemManager as E,FileSystemWorkspaceBinding as T,Persistence as D,NetworkPersistenceManager as y}from"../persistence/persistence.js";import{NumberUtilities as P}from"../platform/platform.js";import{InspectorBackend as U}from"../protocol_client/protocol_client.js";import{Runtime as L}from"../root/root.js";import{ThemeSupport as R}from"../theme_support/theme_support.js";import{ViewManager as F,UIUtils as A,InspectorView as B,ZoomManager as N,ContextMenu as W,Tooltip as H,DockController as O,ShortcutsScreen as z,Context as V,ActionRegistry as j,ShortcutRegistry as K,KeyboardShortcut as G,SearchableView as q,Toolbar as Z,RootView as J}from"../ui/ui.js";import{FileManager as Q,Workspace as X}from"../workspace/workspace.js";class Y{constructor(n,i){i.addFlavorChangeListener(e.ExecutionContext,this._executionContextChanged,this),i.addFlavorChangeListener(t.Target,this._targetChanged,this),n.addModelListener(e.RuntimeModel,e.Events.ExecutionContextCreated,this._onExecutionContextCreated,this),n.addModelListener(e.RuntimeModel,e.Events.ExecutionContextDestroyed,this._onExecutionContextDestroyed,this),n.addModelListener(e.RuntimeModel,e.Events.ExecutionContextOrderChanged,this._onExecutionContextOrderChanged,this),this._targetManager=n,this._context=i,n.observeModels(e.RuntimeModel,this)}modelAdded(e){setImmediate(function(){this._context.flavor(t.Target)||this._context.setFlavor(t.Target,e.target())}.bind(this))}modelRemoved(n){const i=this._context.flavor(e.ExecutionContext);i&&i.runtimeModel===n&&this._currentExecutionContextGone();const o=this._targetManager.models(e.RuntimeModel);this._context.flavor(t.Target)===n.target()&&o.length&&this._context.setFlavor(t.Target,o[0].target())}_executionContextChanged(e){const n=e.data;n&&(this._context.setFlavor(t.Target,n.target()),this._ignoreContextChanged||(this._lastSelectedContextId=this._contextPersistentId(n)))}_contextPersistentId(e){return e.isDefault?e.target().name()+":"+e.frameId:""}_targetChanged(t){const n=t.data,i=this._context.flavor(e.ExecutionContext);if(!n||i&&i.target()===n)return;const o=n.model(e.RuntimeModel),r=o?o.executionContexts():[];if(!r.length)return;let s=null;for(let e=0;e<r.length&&!s;++e)this._shouldSwitchToContext(r[e])&&(s=r[e]);for(let e=0;e<r.length&&!s;++e)this._isDefaultContext(r[e])&&(s=r[e]);this._ignoreContextChanged=!0,this._context.setFlavor(e.ExecutionContext,s||r[0]),this._ignoreContextChanged=!1}_shouldSwitchToContext(e){return!(!this._lastSelectedContextId||this._lastSelectedContextId!==this._contextPersistentId(e))||!(this._lastSelectedContextId||!this._isDefaultContext(e))}_isDefaultContext(e){if(!e.isDefault||!e.frameId)return!1;if(e.target().parentTarget())return!1;const t=e.target().model(n.ResourceTreeModel),i=t&&t.frameForId(e.frameId);return!(!i||!i.isTopFrame())}_onExecutionContextCreated(e){this._switchContextIfNecessary(e.data)}_onExecutionContextDestroyed(t){const n=t.data;this._context.flavor(e.ExecutionContext)===n&&this._currentExecutionContextGone()}_onExecutionContextOrderChanged(e){const t=e.data.executionContexts();for(let e=0;e<t.length&&!this._switchContextIfNecessary(t[e]);e++);}_switchContextIfNecessary(t){return!(this._context.flavor(e.ExecutionContext)&&!this._shouldSwitchToContext(t))&&(this._ignoreContextChanged=!0,this._context.setFlavor(e.ExecutionContext,t),this._ignoreContextChanged=!1,!0)}_currentExecutionContextGone(){const t=this._targetManager.models(e.RuntimeModel);let n=null;for(let e=0;e<t.length&&!n;++e){const i=t[e].executionContexts();for(const e of i)if(this._isDefaultContext(e)){n=e;break}}if(!n)for(let e=0;e<t.length&&!n;++e){const i=t[e].executionContexts();if(i.length){n=i[0];break}}this._ignoreContextChanged=!0,this._context.setFlavor(e.ExecutionContext,n),this._ignoreContextChanged=!1}}var $=Object.freeze({__proto__:null,ExecutionContextSelector:Y});class ee{constructor(){ee._instanceForTest=this,runOnWindowLoad(this._loaded.bind(this))}static time(e){b.isUnderTest()||console.time(e)}static timeEnd(e){b.isUnderTest()||console.timeEnd(e)}async _loaded(){console.timeStamp("Main._loaded"),await Runtime.appStarted,L.Runtime.setPlatform(C.platform()),L.Runtime.setL10nCallback(ls),b.InspectorFrontendHostInstance.getPreferences(this._gotPreferences.bind(this))}_gotPreferences(e){console.timeStamp("Main._gotPreferences"),this._createSettings(e),this._createAppUI()}_createSettings(e){this._initializeExperiments();let t,n="";C.isCustomDevtoolsFrontend()?n="__custom__":L.Runtime.queryParam("can_dock")||!L.Runtime.queryParam("debugFrontend")||b.isUnderTest()||(n="__bundled__"),t=!b.isUnderTest()&&window.localStorage?new m.SettingsStorage(window.localStorage,void 0,void 0,()=>window.localStorage.clear(),n):new m.SettingsStorage({},void 0,void 0,void 0,n);const i=new m.SettingsStorage(e,b.InspectorFrontendHostInstance.setPreference,b.InspectorFrontendHostInstance.removePreference,b.InspectorFrontendHostInstance.clearPreferences,n);m.Settings.instance({forceNew:!0,globalStorage:i,localStorage:t}),self.Common.settings=m.Settings.instance(),b.isUnderTest()||(new m.VersionController).updateVersion()}_initializeExperiments(){L.experiments.register("applyCustomStylesheet","Allow custom UI themes"),L.experiments.register("captureNodeCreationStacks","Capture node creation stacks"),L.experiments.register("sourcesPrettyPrint","Automatically pretty print in the Sources Panel"),L.experiments.register("backgroundServices","Background web platform feature events",!0),L.experiments.register("backgroundServicesNotifications","Background services section for Notifications"),L.experiments.register("backgroundServicesPaymentHandler","Background services section for Payment Handler"),L.experiments.register("backgroundServicesPushMessaging","Background services section for Push Messaging"),L.experiments.register("blackboxJSFramesOnTimeline","Blackbox JavaScript frames on Timeline",!0),L.experiments.register("cssOverview","CSS Overview"),L.experiments.register("emptySourceMapAutoStepping","Empty sourcemap auto-stepping"),L.experiments.register("inputEventsOnTimelineOverview","Input events on Timeline overview",!0),L.experiments.register("liveHeapProfile","Live heap profile",!0),L.experiments.register("protocolMonitor","Protocol Monitor"),L.experiments.register("developerResourcesView","Show developer resources view"),L.experiments.register("recordCoverageWithPerformanceTracing","Record coverage while performance tracing"),L.experiments.register("samplingHeapProfilerTimeline","Sampling heap profiler timeline",!0),L.experiments.register("showOptionToNotTreatGlobalObjectsAsRoots","Show option to take heap snapshot where globals are not treated as root"),L.experiments.register("sourceDiff","Source diff"),L.experiments.register("sourceOrderViewer","Source order viewer"),L.experiments.register("spotlight","Spotlight",!0),L.experiments.register("webauthnPane","WebAuthn Pane"),L.experiments.register("keyboardShortcutEditor","Enable keyboard shortcut editor",!0),L.experiments.register("timelineEventInitiators","Timeline: event initiators"),L.experiments.register("timelineFlowEvents","Timeline: flow events",!0),L.experiments.register("timelineInvalidationTracking","Timeline: invalidation tracking",!0),L.experiments.register("timelineShowAllEvents","Timeline: show all events",!0),L.experiments.register("timelineV8RuntimeCallStats","Timeline: V8 Runtime Call Stats on Timeline",!0),L.experiments.register("timelineWebGL","Timeline: WebGL-based flamechart"),L.experiments.register("timelineReplayEvent","Timeline: Replay input events",!0),L.experiments.register("wasmDWARFDebugging","WebAssembly Debugging: Enable DWARF support"),L.experiments.register("dualScreenSupport","Emulation: Support dual screen mode"),L.experiments.register("cssGridFeatures","Enable new CSS Grid debugging features (configuration options available in Layout sidebar pane in Elements after restart)"),L.experiments.enableExperimentsByDefault(["cssGridFeatures"]),L.experiments.cleanUpStaleExperiments();const e=L.Runtime.queryParam("enabledExperiments");e&&L.experiments.setServerEnabledExperiments(e.split(";")),L.experiments.enableExperimentsTransiently(["backgroundServices","backgroundServicesNotifications","backgroundServicesPushMessaging","backgroundServicesPaymentHandler","webauthnPane"]),b.isUnderTest()&&L.Runtime.queryParam("test").includes("live-line-level-heap-profile.js")&&L.experiments.enableForTest("liveHeapProfile");for(const e of L.experiments.enabledExperiments())I.experimentEnabledAtLaunch(e.name)}async _createAppUI(){ee.time("Main._createAppUI"),self.UI.viewManager=F.ViewManager.instance(),self.Persistence.isolatedFileSystemManager=E.IsolatedFileSystemManager.instance();const e=m.Settings.instance().createSetting("uiTheme","systemPreferred");if(A.initializeUIUtils(document,e),"systemPreferred"===e.get()){window.matchMedia("(prefers-color-scheme: dark)").addEventListener("change",()=>{B.InspectorView.instance().displayReloadRequiredWarning(ls`The system-preferred color scheme has changed. To apply this change to DevTools, reload.`)})}A.installComponentRootStyles(document.body),this._addMainEventListeners(document);const n=!!L.Runtime.queryParam("can_dock");self.UI.zoomManager=N.ZoomManager.instance({forceNew:!0,win:window,frontendHost:b.InspectorFrontendHostInstance}),self.UI.inspectorView=B.InspectorView.instance(),W.ContextMenu.initialize(),W.ContextMenu.installHandler(document),H.Tooltip.installHandler(document),self.SDK.consoleModel=i.ConsoleModel.instance(),self.UI.dockController=O.DockController.instance({forceNew:!0,canDock:n}),self.SDK.multitargetNetworkManager=o.MultitargetNetworkManager.instance({forceNew:!0}),self.SDK.domDebuggerManager=r.DOMDebuggerManager.instance({forceNew:!0}),t.TargetManager.instance().addEventListener(t.Events.SuspendStateChanged,this._onSuspendStateChanged.bind(this)),self.UI.shortcutsScreen=z.ShortcutsScreen.instance({forceNew:!0}),z.ShortcutsScreen.instance().section(h.UIString("Elements Panel")),z.ShortcutsScreen.instance().section(h.UIString("Styles Pane")),z.ShortcutsScreen.instance().section(h.UIString("Debugger")),z.ShortcutsScreen.instance().section(h.UIString("Console")),self.Workspace.fileManager=Q.FileManager.instance({forceNew:!0}),self.Workspace.workspace=X.WorkspaceImpl.instance(),self.Bindings.networkProjectManager=a.NetworkProjectManager.instance(),self.Bindings.resourceMapping=c.ResourceMapping.instance({forceNew:!0,targetManager:t.TargetManager.instance(),workspace:X.WorkspaceImpl.instance()}),new l.PresentationConsoleMessageManager,self.Bindings.cssWorkspaceBinding=d.CSSWorkspaceBinding.instance({forceNew:!0,targetManager:t.TargetManager.instance(),workspace:X.WorkspaceImpl.instance()}),self.Bindings.debuggerWorkspaceBinding=g.DebuggerWorkspaceBinding.instance({forceNew:!0,targetManager:t.TargetManager.instance(),workspace:X.WorkspaceImpl.instance()}),self.Bindings.breakpointManager=u.BreakpointManager.instance({forceNew:!0,workspace:X.WorkspaceImpl.instance(),targetManager:t.TargetManager.instance(),debuggerWorkspaceBinding:g.DebuggerWorkspaceBinding.instance()}),self.Extensions.extensionServer=M.ExtensionServer.instance({forceNew:!0}),new T.FileSystemWorkspaceBinding(E.IsolatedFileSystemManager.instance(),X.WorkspaceImpl.instance()),self.Persistence.persistence=D.PersistenceImpl.instance({forceNew:!0,workspace:X.WorkspaceImpl.instance(),breakpointManager:u.BreakpointManager.instance()}),self.Persistence.networkPersistenceManager=y.NetworkPersistenceManager.instance({forceNew:!0,workspace:X.WorkspaceImpl.instance()}),new Y(t.TargetManager.instance(),V.Context.instance()),self.Bindings.blackboxManager=p.BlackboxManager.instance({forceNew:!0,debuggerWorkspaceBinding:g.DebuggerWorkspaceBinding.instance()}),new te;const s=j.ActionRegistry.instance({forceNew:!0});self.UI.actionRegistry=s,self.UI.shortcutRegistry=K.ShortcutRegistry.instance({forceNew:!0,actionRegistry:s}),z.ShortcutsScreen.registerShortcuts(),this._registerMessageSinkListener(),ee.timeEnd("Main._createAppUI"),this._showAppUI(await L.Runtime.instance().extension(f.AppProvider).instance())}_showAppUI(e){ee.time("Main._showAppUI");const t=e.createApp();O.DockController.instance().initialize(),t.presentUI(document);const n=j.ActionRegistry.instance().action("elements.toggle-element-search");n&&b.InspectorFrontendHostInstance.events.addEventListener(_.Events.EnterInspectElementMode,()=>{n.execute()},this),b.InspectorFrontendHostInstance.events.addEventListener(_.Events.RevealSourceLine,this._revealSourceLine,this),B.InspectorView.instance().createToolbars(),b.InspectorFrontendHostInstance.loadCompleted();const i=L.Runtime.instance().extensions(S.QueryParamHandler);for(const e of i){const t=L.Runtime.queryParam(e.descriptor().name);null!==t&&e.instance().then(e=>{e.handleQueryParam(t)})}setTimeout(this._initializeTarget.bind(this),0),ee.timeEnd("Main._showAppUI")}async _initializeTarget(){ee.time("Main._initializeTarget");const e=await Promise.all(L.Runtime.instance().extensions("early-initialization").map(e=>e.instance()));for(const t of e)await t.run();b.InspectorFrontendHostInstance.readyForTest(),setTimeout(this._lateInitialization.bind(this),100),ee.timeEnd("Main._initializeTarget")}_lateInitialization(){ee.time("Main._lateInitialization"),this._registerShortcuts(),M.ExtensionServer.instance().initializeExtensions();const e=L.Runtime.instance().extensions("late-initialization"),t=[];for(const i of e){const e=i.descriptor().setting;async function n(t){t.data&&(m.Settings.instance().moduleSetting(e).removeChangeListener(n),(await i.instance()).run())}e&&!m.Settings.instance().moduleSetting(e).get()?m.Settings.instance().moduleSetting(e).addChangeListener(n):t.push(i.instance().then(e=>e.run()))}this._lateInitDonePromise=Promise.all(t),ee.timeEnd("Main._lateInitialization")}lateInitDonePromiseForTest(){return this._lateInitDonePromise}_registerMessageSinkListener(){x.Console.instance().addEventListener(x.Events.MessageAdded,(function(e){e.data.show&&x.Console.instance().show()}))}_revealSourceLine(e){const t=e.data.url,n=e.data.lineNumber,i=e.data.columnNumber,o=X.WorkspaceImpl.instance().uiSourceCodeForURL(t);o?v.reveal(o.uiLocation(n,i)):X.WorkspaceImpl.instance().addEventListener(X.Events.UISourceCodeAdded,(function e(o){const r=o.data;r.url()===t&&(v.reveal(r.uiLocation(n,i)),X.WorkspaceImpl.instance().removeEventListener(X.Events.UISourceCodeAdded,e))}))}_registerShortcuts(){const e=G.KeyboardShortcut,t=z.ShortcutsScreen.instance().section(h.UIString("All Panels"));let n=[e.makeDescriptor("[",G.Modifiers.CtrlOrMeta),e.makeDescriptor("]",G.Modifiers.CtrlOrMeta)];t.addRelatedKeys(n,h.UIString("Go to the panel to the left/right"));const i=h.UIString("Show console");t.addKey(e.makeDescriptor(G.Keys.Tilde,G.Modifiers.Ctrl),i),t.addKey(e.makeDescriptor(G.Keys.Esc),h.UIString("Toggle drawer")),O.DockController.instance().canDock()&&(t.addKey(e.makeDescriptor("M",G.Modifiers.CtrlOrMeta|G.Modifiers.Shift),h.UIString("Toggle device mode")),t.addKey(e.makeDescriptor("D",G.Modifiers.CtrlOrMeta|G.Modifiers.Shift),h.UIString("Toggle dock side"))),t.addKey(e.makeDescriptor("f",G.Modifiers.CtrlOrMeta),h.UIString("Search"));const o=C.isMac()?G.Modifiers.Meta|G.Modifiers.Alt:G.Modifiers.Ctrl|G.Modifiers.Shift,r=e.makeDescriptor("f",o);t.addKey(r,h.UIString("Search across all sources"));const s=K.ShortcutRegistry.instance().shortcutDescriptorsForAction("elements.toggle-element-search");s.length&&t.addKey(s[0],h.UIString("Select node to inspect"));const a=G.KeyboardShortcut.makeDescriptor("p",G.Modifiers.CtrlOrMeta);t.addKey(a,h.UIString("Go to source")),C.isMac()&&(n=[e.makeDescriptor("g",G.Modifiers.Meta),e.makeDescriptor("g",G.Modifiers.Meta|G.Modifiers.Shift)],t.addRelatedKeys(n,h.UIString("Find next/previous")))}_postDocumentKeyDown(e){e.handled||K.ShortcutRegistry.instance().handleShortcut(e)}_redispatchClipboardEvent(e){const t=new CustomEvent("clipboard-"+e.type,{bubbles:!0});t.original=e;const n=e.target&&e.target.ownerDocument,i=n?n.deepActiveElement():null;i&&i.dispatchEvent(t),t.handled&&e.preventDefault()}_contextMenuEventFired(e){(e.handled||e.target.classList.contains("popup-glasspane"))&&e.preventDefault()}_addMainEventListeners(e){e.addEventListener("keydown",this._postDocumentKeyDown.bind(this),!1),e.addEventListener("beforecopy",this._redispatchClipboardEvent.bind(this),!0),e.addEventListener("copy",this._redispatchClipboardEvent.bind(this),!1),e.addEventListener("cut",this._redispatchClipboardEvent.bind(this),!1),e.addEventListener("paste",this._redispatchClipboardEvent.bind(this),!1),e.addEventListener("contextmenu",this._contextMenuEventFired.bind(this),!0)}_onSuspendStateChanged(){const e=t.TargetManager.instance().allTargetsSuspended();B.InspectorView.instance().onSuspendStateChanged(e)}}class te{constructor(){t.TargetManager.instance().addModelListener(s.DebuggerModel,s.Events.DebuggerPaused,this._debuggerPaused,this)}_debuggerPaused(e){t.TargetManager.instance().removeModelListener(s.DebuggerModel,s.Events.DebuggerPaused,this._debuggerPaused,this);const n=e.data,i=n.debuggerPausedDetails();V.Context.instance().setFlavor(t.Target,n.target()),v.reveal(i)}}new ee;var ne=Object.freeze({__proto__:null,MainImpl:ee,ZoomActionDelegate:class{handleAction(e,t){if(b.InspectorFrontendHostInstance.isHostedMode())return!1;switch(t){case"main.zoom-in":return b.InspectorFrontendHostInstance.zoomIn(),!0;case"main.zoom-out":return b.InspectorFrontendHostInstance.zoomOut(),!0;case"main.zoom-reset":return b.InspectorFrontendHostInstance.resetZoom(),!0}return!1}},SearchActionDelegate:class{handleAction(e,t){let n=q.SearchableView.fromElement(document.deepActiveElement());if(!n){const e=B.InspectorView.instance().currentPanelDeprecated();if(e&&(n=e.searchableView()),!n)return!1}switch(t){case"main.search-in-panel.find":return n.handleFindShortcut();case"main.search-in-panel.cancel":return n.handleCancelSearchShortcut();case"main.search-in-panel.find-next":return n.handleFindNextShortcut();case"main.search-in-panel.find-previous":return n.handleFindPreviousShortcut()}return!1}},MainMenuItem:class{constructor(){this._item=new Z.ToolbarMenuButton(this._handleContextMenu.bind(this),!0),this._item.setTitle(h.UIString("Customize and control DevTools"))}item(){return this._item}_handleContextMenu(e){if(O.DockController.instance().canDock()){const t=document.createElement("div");t.classList.add("flex-centered"),t.classList.add("flex-auto"),t.tabIndex=-1;const n=t.createChild("span","flex-auto");n.textContent=h.UIString("Dock side");const o=K.ShortcutRegistry.instance().shortcutsForAction("main.toggle-dock");n.title=h.UIString("Placement of DevTools relative to the page. (%s to restore last position)",o[0].title()),t.appendChild(n);const r=new Z.Toolbar("",t);C.isMac()&&!R.instance().hasTheme()&&r.makeBlueOnHover();const s=new Z.ToolbarToggle(h.UIString("Undock into separate window"),"largeicon-undock"),a=new Z.ToolbarToggle(h.UIString("Dock to bottom"),"largeicon-dock-to-bottom"),c=new Z.ToolbarToggle(h.UIString("Dock to right"),"largeicon-dock-to-right"),l=new Z.ToolbarToggle(h.UIString("Dock to left"),"largeicon-dock-to-left");s.addEventListener(Z.ToolbarButton.Events.MouseDown,e=>e.data.consume()),a.addEventListener(Z.ToolbarButton.Events.MouseDown,e=>e.data.consume()),c.addEventListener(Z.ToolbarButton.Events.MouseDown,e=>e.data.consume()),l.addEventListener(Z.ToolbarButton.Events.MouseDown,e=>e.data.consume()),s.addEventListener(Z.ToolbarButton.Events.Click,i.bind(null,O.State.Undocked)),a.addEventListener(Z.ToolbarButton.Events.Click,i.bind(null,O.State.DockedToBottom)),c.addEventListener(Z.ToolbarButton.Events.Click,i.bind(null,O.State.DockedToRight)),l.addEventListener(Z.ToolbarButton.Events.Click,i.bind(null,O.State.DockedToLeft)),s.setToggled(O.DockController.instance().dockSide()===O.State.Undocked),a.setToggled(O.DockController.instance().dockSide()===O.State.DockedToBottom),c.setToggled(O.DockController.instance().dockSide()===O.State.DockedToRight),l.setToggled(O.DockController.instance().dockSide()===O.State.DockedToLeft),r.appendToolbarItem(s),r.appendToolbarItem(l),r.appendToolbarItem(a),r.appendToolbarItem(c),t.addEventListener("keydown",e=>{let t=0;if("ArrowLeft"===e.key)t=-1;else{if("ArrowRight"!==e.key)return;t=1}const n=[s,l,a,c];let i=n.findIndex(e=>e.element.hasFocus());i=P.clamp(i+t,0,n.length-1),n[i].element.focus(),e.consume(!0)}),e.headerSection().appendCustomItem(t)}const n=this._item.element;function i(t){O.DockController.instance().once(O.Events.AfterDockSideChanged).then(()=>{n.focus()}),O.DockController.instance().setDockSide(t),e.discard()}O.DockController.instance().dockSide()===O.State.Undocked&&t.TargetManager.instance().mainTarget()&&t.TargetManager.instance().mainTarget().type()===t.Type.Frame&&e.defaultSection().appendAction("inspector_main.focus-debuggee",h.UIString("Focus debuggee")),e.defaultSection().appendAction("main.toggle-drawer",B.InspectorView.instance().drawerVisible()?h.UIString("Hide console drawer"):h.UIString("Show console drawer")),e.appendItemsAtLocation("mainMenu");const o=e.defaultSection().appendSubMenuItem(h.UIString("More tools")),r=L.Runtime.instance().extensions("view",void 0,!0);for(const e of r){const t=e.descriptor();"issues-pane"!==t.id?"closeable"===t.persistence&&("drawer-view"!==t.location&&"panel"!==t.location||o.defaultSection().appendItem(e.title(),F.ViewManager.instance().showView.bind(F.ViewManager.instance(),t.id,!0))):o.defaultSection().appendItem(e.title(),()=>{I.issuesPanelOpenedFrom(k.IssueOpener.HamburgerMenu),F.ViewManager.instance().showView("issues-pane",!0)})}e.footerSection().appendSubMenuItem(h.UIString("Help")).appendItemsAtLocation("mainMenuHelp")}},SettingsButtonProvider:class{constructor(){this._settingsButton=Z.Toolbar.createActionButtonForId("settings.show",{showLabel:!1})}item(){return this._settingsButton}},PauseListener:te,sendOverProtocol:function(e,t){return new Promise((n,i)=>{U.test.sendRawMessage(e,t,(e,...t)=>e?i(e):n(t))})},ReloadActionDelegate:class{handleAction(e,t){switch(t){case"main.debug-reload":return w.reload(),!0}return!1}}});class ie{presentUI(e){const t=new J.RootView;B.InspectorView.instance().show(t.element),t.attachToDocument(e),t.focus()}}var oe=Object.freeze({__proto__:null,SimpleApp:ie,SimpleAppProvider:class{createApp(){return new ie}}});export{$ as ExecutionContextSelector,ne as MainImpl,oe as SimpleApp};
